#!/usr/bin/env bash
set -euo pipefail

SCRIPT_PATH=$(dirname "$0")
TEMPORARY_DIR=$(mktemp -d)

OUTPUT_PATH="${SCRIPT_PATH}/../Sources/MapboxSearch/PublicAPI/Maki.swift"
GENERATED_MAKI_OUTPUT_PATH="${SCRIPT_PATH}/../Sources/MapboxSearchUI/Assets.xcassets/maki/"
PREV_GENERATED_MAKI_OUTPUT_PATH="${TEMPORARY_DIR}/prev_maki/"

GENERATED_PNG_OUTPUT_SIZE_PT=24
GENERATED_PNG_NONE_BORDER_WIDTH_PT=0

# Pass DEBUG=1 to get diffs for non-equal images
DEBUG="${DEBUG:-0}"


echo "Downloading latest Maki"
pushd "${TEMPORARY_DIR}" > /dev/null
curl --silent -Lo maki.zip https://github.com/mapbox/maki/archive/refs/heads/main.zip

echo "Unzipping Maki.zip"
unzip -o maki.zip -d maki > /dev/null

echo "Maki.swift generation"
cat <<EOF > "${OUTPUT_PATH}"
// This file was generated by '$(basename $0)' script

/// Represents static enumeration for all available icons in Mapbox [Maki icon set](https://github.com/mapbox/maki/).
/// Kebab-case was replaced with camelCase.
// swiftformat:disable:next redundantRawValues
public enum Maki: String, CaseIterable, Codable {
EOF

MAKI_ICON_PATHS=$(find maki/*/icons -name "*.svg" | sort)

i=0
for file in ${MAKI_ICON_PATHS}; do
    filefolder=$(dirname "$file")
    filename=$(basename "$file" .svg)
    # snake_case to camelCase: https://stackoverflow.com/a/50224830
    camelName=$(echo ${filename//-/_} | perl -nE 'say lcfirst join "", map {ucfirst lc} split /[^[:alnum:]]+/')
    echo "    /// Maki icon \"${filename}\"" >> "${OUTPUT_PATH}"
    echo "    case ${camelName} = \"${filename}\"" >> "${OUTPUT_PATH}"
    i=$((i+1))
done

cat <<EOF >> "${OUTPUT_PATH}"
    
    /// Original name used in Maki icon set
    public var name: String { rawValue }
}
EOF


echo "Validate Maki.swift"
swiftc "${OUTPUT_PATH}" -o /dev/null


echo "Copy sources"
generatePNGs() {
    # if ! [ -x "$(command -v rsvg-convert)" ]; then
    #     echo -e '\033[93m\tSkipping PNGs generation\033[0m: rsvg-convert is not installed.' >&2
    #     echo -e '\tInstallation: brew install librsvg' >&2
    #     return
    # fi

    # if ! [ -x "$(command -v convert)" ]; then
    #     echo -e '\033[93m\tSkipping PNGs generation\033[0m: imagemagick is not installed.' >&2
    #     echo -e '\tInstallation: brew install imagemagick' >&2
    #     return
    # fi


    # Clean xcassets Maki
    mv "$GENERATED_MAKI_OUTPUT_PATH" "$PREV_GENERATED_MAKI_OUTPUT_PATH"

    for file in ${MAKI_ICON_PATHS}; do
        filefolder=$(dirname "$file")
        filename=$(basename "$file" .svg)

        echo "Created SVG file at path " ${filename}
        # Skip if exists in "Custom maki/maki/${filename}.imageset"
        local CURRENT_ICON_IMAGESET_OUTPUT_PATH="${GENERATED_MAKI_OUTPUT_PATH}/${filename}.imageset/"
        mkdir -p "${CURRENT_ICON_IMAGESET_OUTPUT_PATH}"

        mv -v ${file} ${CURRENT_ICON_IMAGESET_OUTPUT_PATH}

        # for scale in 1 2 3; do
            # local filename_scale="${filename}@${scale}x"
            # local output_path="${CURRENT_ICON_IMAGESET_OUTPUT_PATH}/${filename_scale}.png"
            # local tmp_output_path="${CURRENT_ICON_IMAGESET_OUTPUT_PATH}/${filename_scale}.png"
            # local heightSize=$(((GENERATED_PNG_OUTPUT_SIZE_PT-GENERATED_PNG_NONE_BORDER_WIDTH_PT*2)*scale))
            
            # Convert SVG to PNG
            # rsvg-convert "${filefolder}/${filename}.svg" -h ${heightSize} -o "${tmp_output_path}"

            # if [ "$GENERATED_PNG_NONE_BORDER_WIDTH_PT" != 0 ]; then
            #     convert "${tmp_output_path}" -bordercolor none -border $GENERATED_PNG_NONE_BORDER_WIDTH_PT "${tmp_output_path}"
            # fi

            # local prev_filepath="$PREV_GENERATED_MAKI_OUTPUT_PATH/${filename}.imageset/${filename}@${scale}x.png"
            # if [ -f "$prev_filepath" ]; then
            #     DIFF_VALUE=$(compare -metric MAE "$prev_filepath" "$tmp_output_path" null: 2>&1) || true
                
            #     if [ "$DIFF_VALUE" = "0 (0)" ]; then
            #         # Files are equal copy back original file
            #         rm "$tmp_output_path"
            #         cp "$prev_filepath" "$output_path"
            #     else
            #         # Replace file if there is some diff
            #         mv "$tmp_output_path" "$output_path"

            #         if [ "$DEBUG" = "1" ]; then
            #             compare -metric MAE "$prev_filepath" "$tmp_output_path" "$output_path-diff.png" &>/dev/null || true
            #         fi
            #     fi
            # fi
        # done

        IMAGESET_CONTENT_JSON='{"images":[{"filename":"'"${filename}"'","idiom":"universal"}],"info":{"author":"xcode","version":1},"properties":{"preserves-vector-representation":true}}'
        # IMAGESET_CONTENT_JSON='{"images":[{"filename":"'"${filename}@1x.png"'","idiom":"universal","scale":"1x"},{"filename":"'"${filename}@2x.png"'","idiom":"universal","scale":"2x"},{"filename":"'"${filename}@3x.png"'","idiom":"universal","scale":"3x"}],"info":{"author":"generate_maki.sh","version":1}}'
        echo "${IMAGESET_CONTENT_JSON}" > "${CURRENT_ICON_IMAGESET_OUTPUT_PATH}/Contents.json"

    done
}
generatePNGs

echo "Done. Number of icons: $i"
